{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/brady/CSC424/CourseProject/CSC424CourseProject/client/src/components/OrgEvents.js\";\nimport React from 'react';\n\nclass OrgEvents extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      org_id: this.props.match.params.org_id,\n      isOrgLeader: true,\n      formShown: true\n    };\n    this.toggleForm = this.toggleForm.bind(this);\n  }\n\n  componentDidMount() {\n    //fetch the events for this org using the id and save them to the state\n    //Also check if the current user is in the org with the given id and their status in the org\n    fetch('http://localhost:4000');\n  }\n\n  toggleForm() {\n    this.setState({ ...this.state,\n      formShown: !this.state.formShown\n    });\n  }\n\n  render() {\n    let AddEventButton;\n\n    if (this.state.isOrgLeader) {\n      AddEventButton = /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.toggleForm,\n        children: \"Add an Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 33\n      }, this);\n    } else {\n      AddEventButton = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 34\n      }, this);\n    }\n\n    let EventForm;\n\n    if (this.formShown) {\n      EventForm = /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"eventName\",\n          children: \" Event Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"eventName\",\n          name: \"eventNmae\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"eventDate\",\n          children: \" Event Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"Date\",\n          id: \"eventDate\",\n          name: \"eventDate\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"eventDate\",\n          children: \" Event Time\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"eventTime\",\n          name: \"eventTime\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"eventLocation\",\n          children: \"Location \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"eventLocation\",\n          name: \"eventLocation\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Add Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this);\n    } else {\n      EventForm = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 29\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" here is the event data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), AddEventButton, EventForm]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default OrgEvents;","map":{"version":3,"sources":["/home/brady/CSC424/CourseProject/CSC424CourseProject/client/src/components/OrgEvents.js"],"names":["React","OrgEvents","Component","constructor","props","state","org_id","match","params","isOrgLeader","formShown","toggleForm","bind","componentDidMount","fetch","setState","render","AddEventButton","EventForm"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAuC;AAEnCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAY;AAACC,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,CAAwBF,MAAjC;AAAyCG,MAAAA,WAAW,EAAE,IAAtD;AAA4DC,MAAAA,SAAS,EAAE;AAAvE,KAAZ;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AAEf;AACA;AACAC,IAAAA,KAAK,CAAC,uBAAD,CAAL;AACH;;AAEDH,EAAAA,UAAU,GAAE;AAER,SAAKI,QAAL,CAAc,EAAC,GAAG,KAAKV,KAAT;AAAgBK,MAAAA,SAAS,EAAG,CAAC,KAAKL,KAAL,CAAWK;AAAxC,KAAd;AACH;;AAGDM,EAAAA,MAAM,GAAE;AAEJ,QAAIC,cAAJ;;AAEI,QAAG,KAAKZ,KAAL,CAAWI,WAAd,EAA0B;AACtBQ,MAAAA,cAAc,gBAAE;AAAQ,QAAA,OAAO,EAAG,KAAKN,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAhB;AAEH,KAHD,MAGK;AAEDM,MAAAA,cAAc,gBAAG;AAAA;AAAA;AAAA;AAAA,cAAjB;AACH;;AACD,QAAIC,SAAJ;;AACA,QAAG,KAAKR,SAAR,EAAkB;AAEdQ,MAAAA,SAAS,gBACT;AAAA,gCAEI;AAAO,UAAA,OAAO,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAO,UAAA,IAAI,EAAE,MAAb;AAAoB,UAAA,EAAE,EAAE,WAAxB;AAAoC,UAAA,IAAI,EAAE,WAA1C;AAAsD,UAAA,QAAQ;AAA9D;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAKI;AAAO,UAAA,OAAO,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAO,UAAA,IAAI,EAAE,MAAb;AAAoB,UAAA,EAAE,EAAE,WAAxB;AAAoC,UAAA,IAAI,EAAE,WAA1C;AAAsD,UAAA,QAAQ;AAA9D;AAAA;AAAA;AAAA;AAAA,gBANJ,eAQI;AAAO,UAAA,OAAO,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI;AAAO,UAAA,IAAI,EAAE,MAAb;AAAoB,UAAA,EAAE,EAAE,WAAxB;AAAoC,UAAA,IAAI,EAAE,WAA1C;AAAsD,UAAA,QAAQ;AAA9D;AAAA;AAAA;AAAA;AAAA,gBATJ,eAWI;AAAO,UAAA,OAAO,EAAE,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ,eAYI;AAAO,UAAA,IAAI,EAAE,MAAb;AAAoB,UAAA,EAAE,EAAE,eAAxB;AAAwC,UAAA,IAAI,EAAE,eAA9C;AAA8D,UAAA,QAAQ;AAAtE;AAAA;AAAA;AAAA;AAAA,gBAZJ,eAcI;AAAO,UAAA,IAAI,EAAE,QAAb;AAAsB,UAAA,KAAK,EAAG;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AAoBH,KAtBD,MAsBK;AAEDA,MAAAA,SAAS,gBAAG;AAAA;AAAA;AAAA;AAAA,cAAZ;AACH;;AAEL,wBACI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEKD,cAFL,EAGKC,SAHL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AApEkC;;AAsEvC,eAAejB,SAAf","sourcesContent":["import React from 'react'\n\nclass OrgEvents extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state ={org_id: this.props.match.params.org_id, isOrgLeader: true, formShown: true}\n        this.toggleForm = this.toggleForm.bind(this)\n    }\n\n    componentDidMount(){\n\n        //fetch the events for this org using the id and save them to the state\n        //Also check if the current user is in the org with the given id and their status in the org\n        fetch('http://localhost:4000')\n    }\n\n    toggleForm(){\n\n        this.setState({...this.state, formShown : !this.state.formShown})\n    }\n\n    \n    render(){\n\n        let AddEventButton\n\n            if(this.state.isOrgLeader){\n                AddEventButton= <button onClick= {this.toggleForm}>Add an Event</button>\n\n            }else{\n\n                AddEventButton = <div></div>\n            }\n            let EventForm\n            if(this.formShown){\n\n                EventForm = (\n                <form>\n\n                    <label htmlFor= 'eventName'> Event Name</label>\n                    <input type= 'text' id= 'eventName' name= 'eventNmae' required/>\n\n                    <label htmlFor= 'eventDate'> Event Date</label>\n                    <input type= 'Date' id= 'eventDate' name= 'eventDate' required/>\n\n                    <label htmlFor= 'eventDate'> Event Time</label>\n                    <input type= 'text' id= 'eventTime' name= 'eventTime' required/>\n\n                    <label htmlFor= 'eventLocation'>Location </label>\n                    <input type= 'text' id= 'eventLocation' name= 'eventLocation' required/>\n\n                    <input type= 'submit' value = 'Add Event' />\n\n\n                </form>\n                )\n            }else{\n\n                EventForm = <div></div>\n            }\n\n        return(\n            <div>\n                <p> here is the event data</p>\n                {AddEventButton}\n                {EventForm}\n            </div>\n\n        )\n    }\n}\nexport default OrgEvents"]},"metadata":{},"sourceType":"module"}